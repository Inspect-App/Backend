name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '21.7.3'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build application
        run: pnpm run build

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: docker build -f docker/prod.Dockerfile -t jeanpaulbassil/inspect-backend:latest .

      - name: Push Docker image
        run: docker push jeanpaulbassil/inspect-backend:latest

      - name: Validate SSH Key
        run: |
          echo "Validating SSH key..."
          echo "${{ secrets.SERVER_SSH_KEY }}" > /home/runner/.ssh/id_rsa
          chmod 600 /home/runner/.ssh/id_rsa
          cat /home/runner/.ssh/id_rsa || (echo "SSH key is invalid or not set" && exit 1)

      - name: Verify Server Connectivity
        run: |
          echo "Testing SSH connection..."
          ssh -o StrictHostKeyChecking=no -i /home/runner/.ssh/id_rsa root@${{ secrets.SERVER_PUBLIC_DNS }} "echo 'SSH connection successful'" || exit 1

      - name: Copy Docker Compose production file to server
        run: |
          echo "Copying Docker Compose file to server..."
          scp -v -o StrictHostKeyChecking=no -i /home/runner/.ssh/id_rsa docker-compose.prod.yaml root@${{ secrets.SERVER_PUBLIC_DNS }}:docker-compose.yaml

      - name: Copy init-db.sh to server
        run: |
          echo "Copying init-db.sh to server..."
          scp -v -o StrictHostKeyChecking=no -i /home/runner/.ssh/id_rsa init_db.sh root@${{ secrets.SERVER_PUBLIC_DNS }}:init_db.sh

      - name: Copy nginx configuration files to server
        run: |
          echo "Copying NGINX configuration to server..."
          scp -v -o StrictHostKeyChecking=no -i /home/runner/.ssh/id_rsa nginx.conf root@${{ secrets.SERVER_PUBLIC_DNS }}:nginx.conf

      - name: Create environment file on server
        run: |
          echo "Creating environment file on server..."
          ssh -o StrictHostKeyChecking=no -i /home/runner/.ssh/id_rsa root@${{ secrets.SERVER_PUBLIC_DNS }} << 'EOF'
            set -e
            echo "Creating .env file..."
            echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" > .env
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
            echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "MAIL_HOST=${{ secrets.MAIL_HOST }}" >> .env
            echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> .env
            echo "MAIL_IGNORE_TLS=${{ secrets.MAIL_IGNORE_TLS }}" >> .env
            echo "MAIL_SECURE=${{ secrets.MAIL_SECURE }}" >> .env
            echo "MAIL_SENDER_EMAIL=${{ secrets.MAIL_SENDER_EMAIL }}" >> .env
            echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
            echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
            echo "S3_PROVIDER=${{ secrets.S3_PROVIDER }}" >> .env
            echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> .env
            echo "STACKHERO_MINIO_HOST=${{ secrets.STACKHERO_MINIO_HOST }}" >> .env
            echo "MINIO_CONSOLE_PORT=${{ secrets.MINIO_CONSOLE_PORT }}" >> .env
            echo "MINIO_PORT=${{ secrets.MINIO_PORT }}" >> .env
            echo "MINIO_API_PORT=${{ secrets.MINIO_API_PORT }}" >> .env
            echo "STACKHERO_MINIO_ACCESS_KEY=${{ secrets.STACKHERO_MINIO_ACCESS_KEY }}" >> .env
            echo "STACKHERO_MINIO_SECRET_KEY=${{ secrets.STACKHERO_MINIO_SECRET_KEY }}" >> .env
            echo "MINIO_ENDPOINT=${{ secrets.MINIO_ENDPOINT }}" >> .env
            echo "NODE_ENV=prod" >> .env
            echo "NESTJS_PORT=${{ secrets.NESTJS_PORT }}" >> .env
          EOF

      - name: Deploy application on server
        run: |
          echo "Deploying application..."
          ssh -o StrictHostKeyChecking=no -i /home/runner/.ssh/id_rsa root@${{ secrets.SERVER_PUBLIC_DNS }} << 'EOF'
            set -e
            echo "Logging into Docker..."
            sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
            echo "Pulling latest images..."
            sudo docker compose pull
            echo "Starting services..."
            sudo docker compose --verbose up -d
          EOF

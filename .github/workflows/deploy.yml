name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: SSH into EC2 and deploy
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          NODE_ENV: ${{ secrets.NODE_ENV }}
          NESTJS_PORT: ${{ secrets.NESTJS_PORT }}
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_PUBLIC_DNS }} << 'EOF'
            if [ ! -d /home/ubuntu/backend ]; then
              mkdir -p /home/ubuntu/backend
              cd /home/ubuntu/backend
              git clone https://github.com/JeanPaulBassil/XOXO-Event-Planner-Backend.git .
            else
              cd /home/ubuntu/backend
              git pull origin main
            fi
            export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            export POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            export POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            export NODE_ENV=${{ secrets.NODE_ENV }}
            export NESTJS_PORT=${{ secrets.NESTJS_PORT }}
            echo "POSTGRES_USER=${POSTGRES_USER}" > .env
            echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> .env
            echo "POSTGRES_DB=${POSTGRES_DB}" >> .env
            echo "POSTGRES_PORT=${POSTGRES_PORT}" >> .env
            echo "NODE_ENV=${NODE_ENV}" >> .env
            echo "NESTJS_PORT=${NESTJS_PORT}" >> .env

            # Deploy the new version
            sudo docker-compose up --build -d nestjs_v2 pgweb

            # Check if the new version is running successfully (add appropriate health checks here)
            sleep 30  # wait for the services to start

            # If new version is running fine, switch the traffic (e.g., update the load balancer or reverse proxy config)
            # Assuming you have a load balancer or reverse proxy like NGINX, you would update its configuration here

            # Remove the old version
            sudo docker-compose stop nestjs_v1
            sudo docker-compose rm -f nestjs_v1
          EOF

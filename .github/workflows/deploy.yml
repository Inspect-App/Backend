name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '21.7.3'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build application
        run: pnpm run build

      # - name: Log in to Docker Hub
      #   run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      # - name: Build Docker image
      #   run: docker build -f Dockerfile.production -t jeanpaulbassil/xoxo-backend:latest .

      # - name: Push Docker image
      #   run: docker push jeanpaulbassil/xoxo-backend:latest

      # - name: Create .ssh directory
      #   run: mkdir -p /home/runner/.ssh

      # - name: Create SSH key file
      #   run: echo "${{ secrets.EC2_SSH_KEY }}" > /home/runner/.ssh/id_rsa

      # - name: Set SSH key permissions
      #   run: chmod 600 /home/runner/.ssh/id_rsa

      # - name: Copy Docker Compose production file to server
      #   run: scp -o StrictHostKeyChecking=no -i /home/runner/.ssh/id_rsa docker-compose.production.yaml ubuntu@${{ secrets.SERVEER_PUBLIC_DNS }}:/home/ubuntu/docker-compose.yaml

      # - name: Copy init-db.sh to server
      #   run: scp -o StrictHostKeyChecking=no -i /home/runner/.ssh/id_rsa -r scripts ubuntu@${{ secrets.SERVER_PUBLIC_DNS }}:/home/ubuntu

      # - name: Copy nginx configuration files to server
      #   run: |
      #     scp -o StrictHostKeyChecking=no -i /home/runner/.ssh/id_rsa -r nginx.conf ubuntu@${{ secrets.SERVER_PUBLIC_DNS }}:/home/ubuntu
      #     scp -o StrictHostKeyChecking=no -i /home/runner/.ssh/id_rsa -r certs ubuntu@${{ secrets.SERVER_PUBLIC_DNS }}:/home/ubuntu

      # - name: SSH into server and create environment file
      #   run: |
      #     ssh -o StrictHostKeyChecking=no -i /home/runner/.ssh/id_rsa ubuntu@${{ secrets.SERVER_PUBLIC_DNS }} << 'EOF'
      #       echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" > /home/ubuntu/.env
      #       echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> /home/ubuntu/.env
      #       echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> /home/ubuntu/.env
      #       echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> /home/ubuntu/.env
      #       echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> /home/ubuntu/.env
      #       echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> /home/ubuntu/.env
      #       echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> /home/ubuntu/.env
      #     EOF

      # - name: SSH into server and deploy
      #   run: |
      #     ssh -o StrictHostKeyChecking=no -i /home/runner/.ssh/id_rsa ubuntu@${{ secrets.SERVER_PUBLIC_DNS }} << 'EOF'
      #       sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      #       cd /home/ubuntu
      #       sudo docker compose pull
      #       sudo docker compose up -d
      #     EOF